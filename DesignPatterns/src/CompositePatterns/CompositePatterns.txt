组合模式概念：
    组合模式将对象以树形结构组织起来，以达到“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。
    详见：https://www.cnblogs.com/lfxiao/p/6816026.html

组合模式主要角色：
    1.Component(抽象构件)：它可以是接口或抽象类，为叶子构件和容器构件对象生命接口，在该角色中包含所有子类共有行为的声明和实现。在抽象构件中定义了访问
    及管理它的子构件的方法，如增加子构件、删除子构件、获取子构件等。
    2.Leaf(叶子构件)：它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，
    可以通过异常等方式进行处理。
    3.Composite(容器构件)：它在组合结构中表示容器节点对象，容器节点包含子节点，其子节点，也可以是容器节点，它提供一个集合用于存储子节点，实现了
    在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中可以递归调用其子节点的业务方法。

组合模式使用场景：
    当需求中是体现部分与整体层次的结构时，以及希望用户可以忽略组合对象？与单个对象的不同时，统一地使用组合结构中的所有对象时，可以考虑使用
    组合模式。

组合模式的优点：
    组合模式定义了包含基本对象和组合对象的类层次结构。基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的递归下去，
    客户代码中，任何用到基本对象的地方都可以使用组合对象了。用户不关心到底是处理一个叶节点还是处理一个组合组件，也就是用不着为定义组合而写一
    些选择判断语句了，简单地说就是组合模式让客户可以一致地使用组合结构和单个对象。

组合模式透明方式：
    在Component中声明所有来管理子对象地房中，其中包括了Add、Remove等。这样实现Component接口地所有子类都具有了Add和Remove。这样做地好处就是
    叶节点和枝节点对于外界没有区别，他们具备完全一致地行为接口，但是问题也很明显，因为Leaf类本身不具备Add()、Remove()方法的功能，所以实现它
    是没有意义的。
组合模式安全方式：
    在Component接口中不去生命Add和Remove方法，那么子类的Leaf也不需要去实现它，而是在Composite声明所有用来管理子类对象的方法。不过由于不
    透明，所以树叶和树枝将不具有相同的接口，客户端的调用需要做相应的判断，带来了不便。

